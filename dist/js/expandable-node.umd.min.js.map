{"version":3,"file":"expandable-node.umd.min.js","sources":["../../src/lib/variables.ts","../../src/lib/utils.ts","../../src/lib/component.ts","../../src/lib/lib.ts"],"sourcesContent":["/**\n * Contains all error messages that might be thrown if errors appear during the use of the library.\n */\nexport const Errors = {\n  CONTAINER_NOT_FOUND: 'Could not find the container element.',\n  DELETE_BTN_CB_UNDEFINED:\n    'The deleteBtnCb is not correctly defined. Please provide a proper callback function.',\n  DELETE_BTN_NOT_FOUND: 'Could not find the delete button element.',\n  EDIT_BTN_NOT_FOUND: 'Could not find the edit button element.',\n  EDIT_BTN_CB_UNDEFINED:\n    'The editBtnCb is not correctly defined. Please provide a proper callback function.',\n  EXPAND_BTN_NOT_FOUND: 'Could not find the expand button element.',\n  EXPAND_BTN_CB_UNDEFINED:\n    'The expandBtnCb is not correctly defined. Please provide a proper callback function.',\n  NODES_ARRAY_NOT_FOUND: 'The options object does not contain the nodes array.',\n  SHAPE_NOT_FOUND: 'Could not find the shape element.',\n  SELECT_BTN_CB_UNDEFINED:\n    'The selectCb is not correctly defined. Please provide a proper callback function.',\n  WRAPPER_NOT_FOUND: 'Could not find the wrapper element.'\n};\n\n/**\n * Contains all class names that are used in the library.\n */\nexport const ClassNames = {\n  CHILDREN: 'exp-node-children',\n  CHILDREN_ACTIONS_WRAPPER: 'exp-node-children-actions-wrapper',\n  CONTAINER: 'exp-node-container',\n  DELETE_BTN: 'exp-node-delete-btn',\n  EDIT_BTN: 'exp-node-edit-btn',\n  EXPAND_BTN: 'exp-node-expand-btn',\n  HIDE: 'exp-node-hide',\n  SHAPE_SELECTION: 'exp-node-shape-selection',\n  SHAPE_SELECTION_ACTIVE: 'exp-node-shape-selection-active',\n  SHAPE: 'exp-node-shape',\n  WRAPPER: 'exp-node-wrapper',\n  EXPAND_LESS_BTN: 'exp-node-expand-less-btn',\n  EXPAND_MORE_BTN: 'exp-node-expand-more-btn'\n};\n\n/**\n * Contains all class selectors that are used in the library.\n */\nexport const Selectors = {\n  CHILDREN_ACTIONS_WRAPPER: `.${ClassNames.CHILDREN_ACTIONS_WRAPPER}`,\n  CHILDREN: `.${ClassNames.CHILDREN}`,\n  CONTAINER: `.${ClassNames.CONTAINER}`,\n  DELETE_BTN: `.${ClassNames.DELETE_BTN}`,\n  EXPAND_BTN: `.${ClassNames.EXPAND_BTN}`,\n  EDIT_BTN: `.${ClassNames.EDIT_BTN}`,\n  SHAPE_SELECTION: `.${ClassNames.SHAPE_SELECTION}`,\n  SHAPE: `.${ClassNames.SHAPE}`,\n  WRAPPER: `.${ClassNames.WRAPPER}`,\n  EXPAND_LESS_BTN: `.${ClassNames.EXPAND_LESS_BTN}`,\n  EXPAND_MORE_BTN: `.${ClassNames.EXPAND_MORE_BTN}`\n};\n","import { Node, NodeType } from './models';\nimport { ClassNames, Errors, Selectors } from './variables';\n\n/**\n * Contains helper methods.\n */\nexport class Utils {\n  /**\n   * Checks if an element contains a class name in its class list.\n   *\n   * @param element   An element which should be checked if it contains a class name.\n   * @param className Class name that should be used for checking.\n   */\n  public static checkIfElementContainsClassName(\n    element: Element,\n    className: string\n  ): boolean {\n    return element.classList.contains(className);\n  }\n\n  /**\n   * Removes selection from all nodes presented in wrapper element.\n   */\n  public static removeSelectionFromAllShapes(): void {\n    const wrapperEl = document.querySelector(Selectors.WRAPPER);\n    if (wrapperEl != null) {\n      wrapperEl\n        .querySelectorAll(Selectors.SHAPE_SELECTION)\n        .forEach(el => el.classList.remove(ClassNames.SHAPE_SELECTION_ACTIVE));\n    } else {\n      throw new Error(Errors.WRAPPER_NOT_FOUND);\n    }\n  }\n\n  /**\n   * Retrieves the css class from types array bases on the type assigned to a node.\n   *\n   * @param node  Node object containing the type for which the css class should be retrieved from types array.\n   * @param types Array containing list of types.\n   */\n  public static getCssClassForAssignedType(\n    node: Node,\n    types: ReadonlyArray<NodeType> = []\n  ): string {\n    const { type } = node;\n\n    if (type != null && this.arrayNotEmpty(types)) {\n      const nodeType = types.find(t => t.type === type);\n      return nodeType != null ? nodeType.cssClass : '';\n    }\n\n    return '';\n  }\n\n  /**\n   * Checks if an array is empty.\n   *\n   * @param array Array that should be checked.\n   */\n  public static arrayEmpty(array: ReadonlyArray<any> = []): boolean {\n    return array === undefined || array === null || array.length === 0;\n  }\n\n  /**\n   * Checks if an array is not empty.\n   *\n   * @param array Array that should be checked.\n   */\n  public static arrayNotEmpty(array: ReadonlyArray<any> = []): boolean {\n    return !this.arrayEmpty(array);\n  }\n\n  /**\n   * Checks if an object has a property.\n   *\n   * @param object   An object that should be checked if it has a property.\n   * @param property Property that should be used for check.\n   */\n  public static checkIfObjectHasProperty(\n    object: {} = {},\n    property: string\n  ): boolean {\n    return object.hasOwnProperty(property);\n  }\n\n  /**\n   * Checks if an object is not undefined and not null.\n   *\n   * @param object Object that should be tested.\n   */\n  public static isDefined(object: any): boolean {\n    return object !== undefined && object !== null;\n  }\n}\n","import { Node, NodeCallbacks, NodeType } from './models';\nimport { Utils } from './utils';\nimport { ClassNames, Errors, Selectors } from './variables';\n\n/**\n * Component used to render a node.\n */\nexport class ExpNodeComponent {\n  /**\n   * Creates a new instance of ExpNodeComponent and adds it to a container.\n   *\n   * @param node        Node object that should be rendered in the ExpNodeComponent.\n   * @param containerEl Element that should be a container for the ExpNodeComponent.\n   * @param callbacks   Object with callback functions.\n   * @param types       Array containing types that can be used for a node.\n   */\n  public static create(\n    node: Node,\n    containerEl: Element,\n    callbacks?: NodeCallbacks,\n    types?: ReadonlyArray<NodeType>\n  ): ExpNodeComponent {\n    return new ExpNodeComponent(node, containerEl, callbacks, types);\n  }\n\n  /**\n   * Defines an element where the ExpNodeComponent will be appended to.\n   */\n  private readonly containerEl: Element;\n\n  /**\n   *  Defines a node object that should be rendered in the ExpNodeComponent.\n   */\n  private readonly node: Node;\n\n  /**\n   * Defines an object containing callbacks for all buttons defined for a node.\n   */\n  private readonly callbacks?: NodeCallbacks;\n\n  /**\n   * Defines an array of types that can be used for a node.\n   */\n  private readonly types?: ReadonlyArray<NodeType>;\n\n  /**\n   * Initializes [[node]], [[containerEl]], [[callbacks]] and [[types]] variable. Calls [[render]] to render passed node.\n   *\n   * @param node        Node object that should be rendered in the ExpNodeComponent.\n   * @param containerEl Element that should be a container for the ExpNodeComponent.\n   * @param callbacks   Object with callback functions.\n   * @param types       Array containing types that can be used for a node.\n   */\n  constructor(\n    node: Node,\n    containerEl: Element,\n    callbacks?: NodeCallbacks,\n    types?: ReadonlyArray<NodeType>\n  ) {\n    this.node = node;\n    this.containerEl = containerEl;\n    this.callbacks = callbacks;\n    this.types = types;\n    this.render();\n  }\n\n  /**\n   * Creates a node and adds it to the [[containerEl]].\n   */\n  private render(): void {\n    const { id } = this.node;\n    const { description } = this.node;\n    const { enableEditBtn } = this.node;\n    const { childNodes } = this.node;\n\n    const expNodeComponent: Element = document.createElement('div');\n    expNodeComponent.id = id;\n    expNodeComponent.classList.add(ClassNames.CONTAINER);\n    expNodeComponent.innerHTML = `\n    <div class=\"exp-node-row\">\n      <div class=\"exp-node-element\">\n        <div class=\"exp-node-shape ${Utils.getCssClassForAssignedType(\n          this.node,\n          this.types\n        )}\"></div>\n        <div class=\"exp-node-shape-selection\"></div>\n      </div>\n      <div class=\"exp-node-element\">\n        <div class=\"exp-node-actions\">\n          <button type=\"button\" class=\"exp-node-delete-btn\"></button>\n          <button type=\"button\" class=\"exp-node-edit-btn exp-node-hide\"></button>\n        </div>\n        <div class=\"exp-node-description\">\n            ${description}\n        </div>\n      </div>\n    </div>\n    <div class=\"exp-node-row\">\n      <div class=\"exp-node-element exp-node-children-actions-wrapper\"></div>\n      <div class=\"exp-node-element exp-node-children-wrapper\">\n          <div class=\"exp-node-children\"></div>\n      </div>\n    </div>`;\n\n    if (\n      Utils.checkIfElementContainsClassName(\n        this.containerEl,\n        ClassNames.WRAPPER\n      )\n    ) {\n      this.containerEl.appendChild(expNodeComponent);\n    } else {\n      const childrenContainerEl = this.containerEl.querySelector(\n        Selectors.CHILDREN\n      );\n      if (childrenContainerEl !== null) {\n        childrenContainerEl.appendChild(expNodeComponent);\n      }\n    }\n\n    if (Utils.arrayNotEmpty(childNodes)) {\n      this.enableChildrenActions(expNodeComponent);\n      this.renderChildNodes(expNodeComponent);\n    }\n    if (enableEditBtn) {\n      this.registerEditBtnClickListener(expNodeComponent);\n    }\n    this.registerDeleteBtnClickListener(expNodeComponent);\n    this.registerSelectClickListener(expNodeComponent);\n  }\n\n  /**\n   * Enables children actions for a given node.\n   *\n   * @param expNodeComponent Node which should have children actions enabled.\n   */\n  private enableChildrenActions(expNodeComponent: Element): void {\n    const childrenActionsContainerEl = expNodeComponent.querySelector(\n      Selectors.CHILDREN_ACTIONS_WRAPPER\n    );\n    if (childrenActionsContainerEl !== null) {\n      childrenActionsContainerEl.innerHTML = `<div class=\"exp-node-children-actions\">\n        <button type=\"button\" class=\"exp-node-expand-btn exp-node-expand-less-btn\"></button>\n      </div>`;\n      this.registerExpandBtnClickListener(expNodeComponent);\n    }\n  }\n\n  /**\n   * Renders children nodes of a node.\n   *\n   * @param expNodeComponent Node which children should be rendered out.\n   */\n  private renderChildNodes(expNodeComponent: Element): void {\n    const { childNodes = [] } = this.node;\n    childNodes.forEach(childNode =>\n      ExpNodeComponent.create(\n        childNode,\n        expNodeComponent,\n        this.callbacks,\n        this.types\n      )\n    );\n  }\n\n  /**\n   * Registers an event listener for the children action button to show/collapse the children nodes.\n   *\n   * @param expNodeComponent Node for which the expand button should be registered.\n   */\n  private registerExpandBtnClickListener(expNodeComponent: Element): void {\n    const expandBtnEl = expNodeComponent.querySelector(Selectors.EXPAND_BTN);\n    const childrenContainerEl = expNodeComponent.querySelector(\n      Selectors.CHILDREN\n    );\n\n    if (expandBtnEl !== null && childrenContainerEl !== null) {\n      expandBtnEl.addEventListener('click', () => {\n        childrenContainerEl.classList.toggle(ClassNames.HIDE);\n\n        if (\n          Utils.checkIfElementContainsClassName(\n            childrenContainerEl,\n            ClassNames.HIDE\n          )\n        ) {\n          expandBtnEl.classList.remove('exp-node-expand-less-btn');\n          expandBtnEl.classList.add('exp-node-expand-more-btn');\n        } else {\n          expandBtnEl.classList.remove('exp-node-expand-more-btn');\n          expandBtnEl.classList.add('exp-node-expand-less-btn');\n        }\n\n        if (Utils.checkIfObjectHasProperty(this.callbacks, 'expandBtnCb')) {\n          const { expandBtnCb } = this.callbacks!;\n          if (Utils.isDefined(expandBtnCb)) {\n            expandBtnCb!(this.node);\n          } else {\n            throw new Error(Errors.EXPAND_BTN_CB_UNDEFINED);\n          }\n        }\n      });\n    } else {\n      throw new Error(Errors.EXPAND_BTN_NOT_FOUND);\n    }\n  }\n\n  /**\n   * Registers an event listener and enables the edit button for a given node.\n   *\n   * @param expNodeComponent Node for which the edit button should be registered.\n   */\n  private registerEditBtnClickListener(expNodeComponent: Element): void {\n    const editBtnEl = expNodeComponent.querySelector(Selectors.EDIT_BTN);\n\n    if (editBtnEl != null) {\n      editBtnEl.classList.remove(ClassNames.HIDE);\n      editBtnEl.addEventListener('click', () => {\n        if (Utils.checkIfObjectHasProperty(this.callbacks, 'editBtnCb')) {\n          const { editBtnCb } = this.callbacks!;\n          if (Utils.isDefined(editBtnCb)) {\n            editBtnCb!(this.node);\n          } else {\n            throw new Error(Errors.EDIT_BTN_CB_UNDEFINED);\n          }\n        }\n      });\n    } else {\n      throw new Error(Errors.EDIT_BTN_NOT_FOUND);\n    }\n  }\n\n  /**\n   * Registers an event listener and enables the edit button for a given node.\n   *\n   * @param expNodeComponent Node for which the edit button should be registered.\n   */\n  private registerDeleteBtnClickListener(expNodeComponent: Element): void {\n    const deleteBtnEl = expNodeComponent.querySelector(Selectors.DELETE_BTN);\n    const parentEl = (expNodeComponent as HTMLElement).parentElement;\n\n    if (deleteBtnEl != null && parentEl != null) {\n      deleteBtnEl.addEventListener('click', () => {\n        parentEl.removeChild(expNodeComponent);\n\n        const childrenActionsContainerEl = this.containerEl.querySelector(\n          Selectors.CHILDREN_ACTIONS_WRAPPER\n        );\n        const childrenContainerEl = this.containerEl.querySelector(\n          Selectors.CHILDREN\n        );\n\n        if (\n          childrenActionsContainerEl != null &&\n          childrenContainerEl != null &&\n          childrenContainerEl.children.length === 0\n        ) {\n          childrenActionsContainerEl.innerHTML = '';\n        }\n\n        if (Utils.checkIfObjectHasProperty(this.callbacks, 'deleteBtnCb')) {\n          const { deleteBtnCb } = this.callbacks!;\n          if (Utils.isDefined(deleteBtnCb)) {\n            deleteBtnCb!(this.node);\n          } else {\n            throw new Error(Errors.DELETE_BTN_CB_UNDEFINED);\n          }\n        }\n      });\n    } else {\n      throw new Error(Errors.DELETE_BTN_NOT_FOUND);\n    }\n  }\n\n  /**\n   * Registers an event listener for the selection of a node.\n   *\n   * @param expNodeComponent Node for which the edit button should be registered.\n   */\n  private registerSelectClickListener(expNodeComponent: Element): void {\n    const shapeEl = expNodeComponent.querySelector(Selectors.SHAPE);\n    const shapeSelectionEl = expNodeComponent.querySelector(\n      Selectors.SHAPE_SELECTION\n    );\n\n    if (shapeEl != null && shapeSelectionEl != null) {\n      shapeEl.addEventListener('click', () => {\n        Utils.removeSelectionFromAllShapes();\n        shapeSelectionEl.classList.add(ClassNames.SHAPE_SELECTION_ACTIVE);\n        if (Utils.checkIfObjectHasProperty(this.callbacks, 'selectCb')) {\n          const { selectCb } = this.callbacks!;\n          if (Utils.isDefined(selectCb)) {\n            selectCb!(this.node);\n          } else {\n            throw new Error(Errors.SELECT_BTN_CB_UNDEFINED);\n          }\n        }\n      });\n    } else {\n      throw new Error(Errors.SHAPE_NOT_FOUND);\n    }\n  }\n}\n","import { ExpNodeComponent } from './component';\nimport { Options } from './models';\nimport { Utils } from './utils';\nimport { ClassNames, Errors } from './variables';\n\n/**\n * Contains all variables and methods necessary for creating and managing a node.\n *\n * A new instance of ExpNode can be created as following:\n * ```\n * const expNode = ExpNode.create(options);\n * ```\n */\nexport class ExpNode {\n  /**\n   * Creates a new instance of ExpNode class.\n   *\n   * @param options [[Options]] object containing values needed for creating a new node.\n   * @returns       A new instance of ExpNode.\n   */\n  public static create(options: Options): ExpNode {\n    return new ExpNode(options);\n  }\n\n  /**\n   * Object containing values needed for creating a new node.\n   */\n  private readonly options: Options;\n\n  /**\n   * Initializes [[options]] variable. Calls [[createWrapper]] to create a wrapper element.\n   *\n   * @param options Object containing values needed for creating a new node.\n   */\n  constructor(options: Options) {\n    this.options = { ...options };\n    this.createWrapper();\n  }\n\n  /**\n   * Creates a wrapper element that will contain all nodes that are present in [[options]] object.\n   * Throws an error if the container property passed in [[options]] object can not be found.\n   */\n  private createWrapper(): void {\n    const { container } = this.options;\n    const containerEl = document.querySelector(`#${container}`)\n      ? document.querySelector(`#${container}`)\n      : document.querySelector(`.${container}`);\n    const wrapperEl = document.createElement('div');\n    wrapperEl.classList.add(ClassNames.WRAPPER);\n    if (containerEl !== null) {\n      containerEl.appendChild(wrapperEl);\n      this.renderNodes(wrapperEl);\n    } else {\n      throw new Error(Errors.CONTAINER_NOT_FOUND);\n    }\n  }\n\n  /**\n   * Creates a new element for every node element that is present in the nodes array. Will throw an error if the nodes array is empty.\n   *\n   * @param wrapperEl Element that will contain all nodes.\n   */\n  private renderNodes(wrapperEl: Element): void {\n    const { nodes } = this.options;\n    const { callbacks } = this.options;\n    const { types } = this.options;\n\n    if (Utils.arrayEmpty(nodes)) {\n      throw Error(Errors.NODES_ARRAY_NOT_FOUND);\n    }\n\n    nodes.forEach(node =>\n      ExpNodeComponent.create(node, wrapperEl, callbacks, types)\n    );\n  }\n}\n"],"names":["Errors","ClassNames","Selectors","CHILDREN_ACTIONS_WRAPPER","CHILDREN","CONTAINER","DELETE_BTN","EXPAND_BTN","EDIT_BTN","SHAPE_SELECTION","SHAPE","WRAPPER","EXPAND_LESS_BTN","EXPAND_MORE_BTN","Utils","element","className","classList","contains","wrapperEl","document","querySelector","Error","querySelectorAll","forEach","el","remove","node","types","type","this","arrayNotEmpty","nodeType","find","t","cssClass","array","length","arrayEmpty","object","property","hasOwnProperty","containerEl","callbacks","render","ExpNodeComponent","id","description","enableEditBtn","childNodes","expNodeComponent","createElement","add","innerHTML","getCssClassForAssignedType","checkIfElementContainsClassName","appendChild","childrenContainerEl","enableChildrenActions","renderChildNodes","registerEditBtnClickListener","registerDeleteBtnClickListener","registerSelectClickListener","childrenActionsContainerEl","registerExpandBtnClickListener","_a","childNode","create","_this","expandBtnEl","addEventListener","toggle","checkIfObjectHasProperty","expandBtnCb","isDefined","editBtnEl","editBtnCb","deleteBtnEl","parentEl","parentElement","removeChild","children","deleteBtnCb","shapeEl","shapeSelectionEl","removeSelectionFromAllShapes","selectCb","options","createWrapper","ExpNode","container","renderNodes","nodes"],"mappings":"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"}